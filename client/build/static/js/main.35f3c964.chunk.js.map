{"version":3,"sources":["utils/history.js","react-auth0-spa.js","components/common/PrivateRoute.js","components/layout/MainNavBar.js","components/layout/PortalNavbar.js","components/layout/VideoBackground.js","components/layout/AboutSection.js","components/pages/HomePage.js","components/pages/Profile.js","components/pages/ExternalApi.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","PrivateRoute","Component","component","path","rest","loading","isAuthenticated","loginWithRedirect","useEffect","a","async","appState","targetUrl","render","props","MainNavBar","id","to","src","alt","PortalNavBar","logout","onClick","VideoBackground","poster","Source","type","AboutSection","HomePage","match","console","log","url","exact","Profile","user","picture","name","email","ExternalApi","useState","showResult","setShowResult","apiMessage","setApiMessage","getTokenSilently","audience","process","scope","redirect_uri","token","fetch","headers","Authorization","response","json","responseData","error","JSON","stringify","App","className","Boolean","hostname","dotenv","config","ReactDOM","children","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","Provider","value","getIdTokenClaims","domain","client_id","origin","push","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35f3c964.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: path }\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst logo = process.env.PUBLIC_URL + './assets/colour-logo.png';\n\nconst MainNavBar = () => {\n    return (\n        <nav id='main-nav-bar'>\n            <span>\n                <Link to=\"/\"><img src={logo} alt=\"Logo\" /></Link>&nbsp;\n                {/* <Link to=\"/contactUs\">Contact Us</Link> */}\n            </span>\n        </nav>\n    );\n};\n\nexport default MainNavBar;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\n\nconst PortalNavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <nav id='portal-nav-bar'>\n      {!isAuthenticated && (\n        <button onClick={() => loginWithRedirect({})}>Log in</button>\n      )}\n\n      {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\n      {isAuthenticated && (\n      <span>\n        <Link to=\"/portal\">Home</Link>\n        <Link to=\"/portal/profile\">Profile</Link>\n        <Link to=\"/portal/external-api\">External API</Link>\n      </span>\n    )}\n    </nav>\n  );\n};\n\nexport default PortalNavBar;","import React from 'react';\nimport VideoBg from \"reactjs-videobg\";\n\nconst videoURL = 'https://drive.google.com/file/d/17lqdAAMvUATZ_tYehANOA2d0NAebNPUL/view?usp=sharing'\nconst poster = process.env.PUBLIC_URL + './assets/colour-logo.png';\n\nconst VideoBackground = () => {\n    return (\n        <VideoBg poster={poster}>\n            <VideoBg.Source src={videoURL} type=\"video/mp4\" />\n            Your browser does not support this content\n        </VideoBg>\n    )};\n\nexport default VideoBackground;","import React from 'react';\n\nconst AboutSection = () => {\n    return (\n        <section id='about-section-container'>\n            <div id=\"about-text-container\">\n                \n                <div id=\"about-section-summary\">\n                    <h1>Who We Are</h1>\n                    <p>\n                        A family owned business, providing a full range of Landscaping Services\n                        to the Central Coast, Lake Macquarie, Newcastle and The Hunter Valley\n                    </p>\n                </div>\n                <div id=\"about-section-values\">\n                    <h1>\n                        Our Values\n                    </h1>\n                    <p>We are committed to deliver a quality product with:</p>\n                    <ul>\n                        <li>Integrity</li>\n                        <li>Excellence</li>\n                        <li>Genuine Care</li>\n                    </ul>\n                </div>\n            </div>\n            <div id=\"about-icons-container\">\n                \n            </div>\n        </section>\n    )\n}\n\nexport default AboutSection","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport VideoBackground from '../layout/VideoBackground';\nimport AboutSection from '../layout/AboutSection';\n\nconst HomePage = ({match}) => {\n    console.log(match.url)\n    return (\n        <Switch>\n            <Route path={match.url} exact component={VideoBackground}/>\n            <Route path={`${match.url}about`} component={AboutSection} />\n            {/* <Route path={`${match.url}/projects`} exact={true} component={Contact} />\n            <Route path={`${match.url}/staff`} exact={true} component={careers} /> */}\n        </Switch>\n    )\n};\n\nexport default HomePage;","import React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n  console.log(user)\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>      \n    </Fragment>\n  );\n};\n\nexport default Profile;","import React, { useState } from \"react\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\n\nconst ExternalApi = () => {\n  const [showResult, setShowResult] = useState(false);\n  const [apiMessage, setApiMessage] = useState(\"\");\n  const { getTokenSilently } = useAuth0();\n\n  const callApi = async () => {\n    try {\n      const token = await getTokenSilently({\n          audience: process.env.REACT_APP_AUTH_AUDIENCE,\n          scope: process.env.REACT_APP_AUTH_ADMIN,\n          redirect_uri: 'http://localhost:3000/'\n        });\n      console.log(token);\n\n      const response = await fetch(\"http://localhost:3001/api/external\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(response);\n      const responseData = await response.json();\n\n      setShowResult(true);\n      setApiMessage(responseData);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <h1>External API</h1>\n      <button onClick={callApi}>Ping API</button>\n      {showResult && <code>{JSON.stringify(apiMessage, null, 2)}</code>}\n    </>\n  );\n};\n\nexport default ExternalApi;","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from './utils/history';\nimport PrivateRoute from './components/common/PrivateRoute';\nimport MainNavBar from './components/layout/MainNavBar';\nimport PortalNavBar from './components/layout/PortalNavbar';\nimport HomePage from './components/pages/HomePage';\nimport Profile from './components/pages/Profile';\nimport ExternalApi from './components/pages/ExternalApi';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <header>\n          <MainNavBar />\n          <Route path=\"/portal\" component={PortalNavBar}/>\n        </header>\n        <Switch>\n          <Route path=\"/\" component={HomePage}/>\n          <PrivateRoute path=\"/portal/profile\" component={Profile} exact/>\n          <PrivateRoute path=\"/portal/external-api\" component={ExternalApi} exact/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './main.css'\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from './react-auth0-spa';\nimport dotenv from 'dotenv';\nimport history from './utils/history';\ndotenv.config();\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={process.env.REACT_APP_AUTH_DOMAIN}\n    client_id={process.env.REACT_APP_AUTH_CLIENT_ID}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n    audience={process.env.REACT_APP_AUTH_AUDIENCE}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}